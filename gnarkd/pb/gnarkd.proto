// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package gnarkd;

option go_package = "github.com/consensys/gnark/gnarkd/pb";

/*
 Provides services to compute and verify ZKSnark proofs supported by gnark
 The circuitID correspond to the directory ([cirduitDir/]provingSystem/curve/name) where the 
 circuit and precomputed setup data are available
 */
service ZKSnark {
	// Prove takes circuitID and witness as parameter
	// this is a synchronous call and bypasses the job queue
	// it is meant to be used for small circuits, for larger circuits (proving time) and witnesses, 
	// use CreateProveJob instead
	rpc Prove(ProveRequest) returns (ProveResult);


	// Verify takes circuitID, proof and public witness as parameter
	// this is a synchronous call
	rpc Verify(VerifyRequest) returns (VerifyResult);


	// CreateProveJob enqueue a job into the job queue with WAITING_WITNESS status
	rpc CreateProveJob(CreateProveJobRequest) returns (CreateProveJobResponse);

	// CancelProveJob does what it says it does.
	rpc CancelProveJob(CancelProveJobRequest) returns (CancelProveJobResponse);

	// ListProveJob does what it says it does.
	rpc ListProveJob(ListProveJobRequest) returns (ListProveJobResponse);

	// SubscribeToProveJob enables a client to get job status changes from the server
	// at connection start, server sends current job status
	// when job is done (ok or errored), server closes connection
	rpc SubscribeToProveJob(SubscribeToProveJobRequest) returns (stream ProveJobResult);
}

message ProveRequest {
	string circuitID = 1;
	bytes witness = 2;
}

message ProveResult {
	bytes proof = 1;
}

message VerifyRequest {
	string circuitID = 1;
	bytes proof = 2;
	bytes publicWitness = 3;
}

message VerifyResult {
	bool ok = 1;
}

message CreateProveJobRequest {
	string circuitID = 1;
	optional int64 TTL = 2; // in seconds
}

message CreateProveJobResponse {
	string jobID = 1;
}

message CancelProveJobRequest {
	string jobID = 1;
}

message CancelProveJobResponse {

}

message ListProveJobRequest {

}

message ListProveJobResponse {
	repeated ProveJobResult jobs = 1;
}

message ProveJobResult {
	string jobID = 1;
	enum Status {
		WAITING_WITNESS = 0;
		QUEUED = 1;
		RUNNING = 2;
		COMPLETED = 3;
		ERRORED = 4;
	}
	Status status = 2;
	optional string err = 3;
	optional bytes proof = 4;
}

message SubscribeToProveJobRequest {
	string jobID = 1;
}
