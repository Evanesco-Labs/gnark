// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package plonk implements PLONK Zero Knowledge Proof system.
//
// See also
//
// https://eprint.iacr.org/2019/953
package plonk

import (
	"github.com/consensys/gnark/frontend"

	cs_bls12377 "github.com/consensys/gnark/internal/backend/bls12-377/cs"
	cs_bls12381 "github.com/consensys/gnark/internal/backend/bls12-381/cs"
	cs_bls24315 "github.com/consensys/gnark/internal/backend/bls24-315/cs"
	cs_bn254 "github.com/consensys/gnark/internal/backend/bn254/cs"
	cs_bw6633 "github.com/consensys/gnark/internal/backend/bw6-633/cs"
	cs_bw6761 "github.com/consensys/gnark/internal/backend/bw6-761/cs"

	plonk_bls12377 "github.com/consensys/gnark/internal/backend/bls12-377/plonk"
	plonk_bls12381 "github.com/consensys/gnark/internal/backend/bls12-381/plonk"
	plonk_bls24315 "github.com/consensys/gnark/internal/backend/bls24-315/plonk"
	plonk_bn254 "github.com/consensys/gnark/internal/backend/bn254/plonk"
	plonk_bw6633 "github.com/consensys/gnark/internal/backend/bw6-633/plonk"
	plonk_bw6761 "github.com/consensys/gnark/internal/backend/bw6-761/plonk"

	witness_bls12377 "github.com/consensys/gnark/internal/backend/bls12-377/witness"
	witness_bls12381 "github.com/consensys/gnark/internal/backend/bls12-381/witness"
	witness_bls24315 "github.com/consensys/gnark/internal/backend/bls24-315/witness"
	witness_bn254 "github.com/consensys/gnark/internal/backend/bn254/witness"
	witness_bw6633 "github.com/consensys/gnark/internal/backend/bw6-633/witness"
	witness_bw6761 "github.com/consensys/gnark/internal/backend/bw6-761/witness"

	kzg_bls12377 "github.com/consensys/gnark-crypto/ecc/bls12-377/fr/kzg"
	kzg_bls12381 "github.com/consensys/gnark-crypto/ecc/bls12-381/fr/kzg"
	kzg_bls24315 "github.com/consensys/gnark-crypto/ecc/bls24-315/fr/kzg"
	kzg_bn254 "github.com/consensys/gnark-crypto/ecc/bn254/fr/kzg"
	kzg_bw6633 "github.com/consensys/gnark-crypto/ecc/bw6-633/fr/kzg"
	kzg_bw6761 "github.com/consensys/gnark-crypto/ecc/bw6-761/fr/kzg"
)

// Proof represents a Plonk proof generated by plonk.Prove
//
// it's underlying implementation is curve specific (see gnark/internal/backend)
type Proof interface {
}

// ProvingKey represents a plonk ProvingKey
//
// it's underlying implementation is strongly typed with the curve (see gnark/internal/backend)
type ProvingKey interface {
}

// VerifyingKey represents a plonk VerifyingKey
//
// it's underlying implementation is strongly typed with the curve (see gnark/internal/backend)
type VerifyingKey interface {
}

// Setup prepares the public data associated to a circuit + public inputs.
func Setup(ccs frontend.CompiledConstraintSystem, kzgSRS interface{}) (ProvingKey, VerifyingKey, error) {

	switch tccs := ccs.(type) {
	case *cs_bn254.SparseR1CS:
		return plonk_bn254.Setup(tccs, kzgSRS.(*kzg_bn254.SRS))
	case *cs_bls12381.SparseR1CS:
		return plonk_bls12381.Setup(tccs, kzgSRS.(*kzg_bls12381.SRS))
	case *cs_bls12377.SparseR1CS:
		return plonk_bls12377.Setup(tccs, kzgSRS.(*kzg_bls12377.SRS))
	case *cs_bw6761.SparseR1CS:
		return plonk_bw6761.Setup(tccs, kzgSRS.(*kzg_bw6761.SRS))
	case *cs_bls24315.SparseR1CS:
		return plonk_bls24315.Setup(tccs, kzgSRS.(*kzg_bls24315.SRS))
	case *cs_bw6633.SparseR1CS:
		return plonk_bw6633.Setup(tccs, kzgSRS.(*kzg_bw6633.SRS))
	default:
		panic("unrecognized R1CS curve type")
	}
}

// Prove generates PLONK proof from a circuit, associated preprocessed public data, and the witness
func Prove(ccs frontend.CompiledConstraintSystem, pk ProvingKey, fullWitness frontend.Circuit) (Proof, error) {

	switch tccs := ccs.(type) {
	case *cs_bn254.SparseR1CS:
		w := witness_bn254.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		return plonk_bn254.Prove(tccs, pk.(*plonk_bn254.ProvingKey), w)

	case *cs_bls12381.SparseR1CS:
		w := witness_bls12381.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		return plonk_bls12381.Prove(tccs, pk.(*plonk_bls12381.ProvingKey), w)

	case *cs_bls12377.SparseR1CS:
		w := witness_bls12377.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		return plonk_bls12377.Prove(tccs, pk.(*plonk_bls12377.ProvingKey), w)

	case *cs_bw6761.SparseR1CS:
		w := witness_bw6761.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		return plonk_bw6761.Prove(tccs, pk.(*plonk_bw6761.ProvingKey), w)

	case *cs_bls24315.SparseR1CS:
		w := witness_bls24315.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		return plonk_bls24315.Prove(tccs, pk.(*plonk_bls24315.ProvingKey), w)

	case *backend_bw6633.SparseR1CS:
		_publicData := publicData.(*plonkbw6633.PublicRaw)
		w := bw6633witness.Witness{}
		if err := w.FromFullAssignment(fullWitness); err != nil {
			return nil, err
		}
		proof, err := plonkbw6633.ProveRaw(_sparseR1cs, _publicData, w)
		if err != nil {
			return proof, err
		}
		return proof, nil

	default:
		panic("unrecognized R1CS curve type")
	}
}

// Verify verifies a PLONK proof, from the proof, preprocessed public data, and public witness.
func Verify(proof Proof, vk VerifyingKey, publicWitness frontend.Circuit) error {

	switch _proof := proof.(type) {

	case *plonk_bn254.Proof:
		w := witness_bn254.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonk_bn254.Verify(_proof, vk.(*plonk_bn254.VerifyingKey), w)

	case *plonk_bls12381.Proof:
		w := witness_bls12381.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonk_bls12381.Verify(_proof, vk.(*plonk_bls12381.VerifyingKey), w)

	case *plonk_bls12377.Proof:
		w := witness_bls12377.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonk_bls12377.Verify(_proof, vk.(*plonk_bls12377.VerifyingKey), w)

	case *plonk_bw6761.Proof:
		w := witness_bw6761.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonk_bw6761.Verify(_proof, vk.(*plonk_bw6761.VerifyingKey), w)

	case *plonk_bls24315.Proof:
		w := witness_bls24315.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonk_bls24315.Verify(_proof, vk.(*plonk_bls24315.VerifyingKey), w)

	case *plonkbw6633.ProofRaw:
		_publicData := publicData.(*plonkbw6633.PublicRaw)
		w := bw6633witness.Witness{}
		if err := w.FromPublicAssignment(publicWitness); err != nil {
			return err
		}
		return plonkbw6633.VerifyRaw(_proof, _publicData, w)

	default:
		panic("unrecognized proof type")
	}
}
