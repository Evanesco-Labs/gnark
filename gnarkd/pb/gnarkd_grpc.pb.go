// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZKSnarkClient is the client API for ZKSnark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZKSnarkClient interface {
	// Prove takes circuitID and witness as parameter
	// this is a synchronous call and bypasses the job queue
	// it is meant to be used for small circuits, for larger circuits (proving time) and witnesses,
	// use CreateProveJob instead
	Prove(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResult, error)
	// Verify takes circuitID, proof and public witness as parameter
	// this is a synchronous call
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResult, error)
	// CreateProveJob enqueue a job into the job queue with WAITING_WITNESS status
	CreateProveJob(ctx context.Context, in *CreateProveJobRequest, opts ...grpc.CallOption) (*CreateProveJobResponse, error)
	// CancelProveJob does what it says it does.
	CancelProveJob(ctx context.Context, in *CancelProveJobRequest, opts ...grpc.CallOption) (*CancelProveJobResponse, error)
	// ListProveJob does what it says it does.
	ListProveJob(ctx context.Context, in *ListProveJobRequest, opts ...grpc.CallOption) (*ListProveJobResponse, error)
	// SubscribeToProveJob enables a client to get job status changes from the server
	// at connection start, server sends current job status
	// when job is done (ok or errored), server closes connection
	SubscribeToProveJob(ctx context.Context, in *SubscribeToProveJobRequest, opts ...grpc.CallOption) (ZKSnark_SubscribeToProveJobClient, error)
}

type zKSnarkClient struct {
	cc grpc.ClientConnInterface
}

func NewZKSnarkClient(cc grpc.ClientConnInterface) ZKSnarkClient {
	return &zKSnarkClient{cc}
}

func (c *zKSnarkClient) Prove(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResult, error) {
	out := new(ProveResult)
	err := c.cc.Invoke(ctx, "/gnarkd.ZKSnark/Prove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKSnarkClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResult, error) {
	out := new(VerifyResult)
	err := c.cc.Invoke(ctx, "/gnarkd.ZKSnark/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKSnarkClient) CreateProveJob(ctx context.Context, in *CreateProveJobRequest, opts ...grpc.CallOption) (*CreateProveJobResponse, error) {
	out := new(CreateProveJobResponse)
	err := c.cc.Invoke(ctx, "/gnarkd.ZKSnark/CreateProveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKSnarkClient) CancelProveJob(ctx context.Context, in *CancelProveJobRequest, opts ...grpc.CallOption) (*CancelProveJobResponse, error) {
	out := new(CancelProveJobResponse)
	err := c.cc.Invoke(ctx, "/gnarkd.ZKSnark/CancelProveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKSnarkClient) ListProveJob(ctx context.Context, in *ListProveJobRequest, opts ...grpc.CallOption) (*ListProveJobResponse, error) {
	out := new(ListProveJobResponse)
	err := c.cc.Invoke(ctx, "/gnarkd.ZKSnark/ListProveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKSnarkClient) SubscribeToProveJob(ctx context.Context, in *SubscribeToProveJobRequest, opts ...grpc.CallOption) (ZKSnark_SubscribeToProveJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZKSnark_ServiceDesc.Streams[0], "/gnarkd.ZKSnark/SubscribeToProveJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &zKSnarkSubscribeToProveJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZKSnark_SubscribeToProveJobClient interface {
	Recv() (*ProveJobResult, error)
	grpc.ClientStream
}

type zKSnarkSubscribeToProveJobClient struct {
	grpc.ClientStream
}

func (x *zKSnarkSubscribeToProveJobClient) Recv() (*ProveJobResult, error) {
	m := new(ProveJobResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZKSnarkServer is the server API for ZKSnark service.
// All implementations must embed UnimplementedZKSnarkServer
// for forward compatibility
type ZKSnarkServer interface {
	// Prove takes circuitID and witness as parameter
	// this is a synchronous call and bypasses the job queue
	// it is meant to be used for small circuits, for larger circuits (proving time) and witnesses,
	// use CreateProveJob instead
	Prove(context.Context, *ProveRequest) (*ProveResult, error)
	// Verify takes circuitID, proof and public witness as parameter
	// this is a synchronous call
	Verify(context.Context, *VerifyRequest) (*VerifyResult, error)
	// CreateProveJob enqueue a job into the job queue with WAITING_WITNESS status
	CreateProveJob(context.Context, *CreateProveJobRequest) (*CreateProveJobResponse, error)
	// CancelProveJob does what it says it does.
	CancelProveJob(context.Context, *CancelProveJobRequest) (*CancelProveJobResponse, error)
	// ListProveJob does what it says it does.
	ListProveJob(context.Context, *ListProveJobRequest) (*ListProveJobResponse, error)
	// SubscribeToProveJob enables a client to get job status changes from the server
	// at connection start, server sends current job status
	// when job is done (ok or errored), server closes connection
	SubscribeToProveJob(*SubscribeToProveJobRequest, ZKSnark_SubscribeToProveJobServer) error
	mustEmbedUnimplementedZKSnarkServer()
}

// UnimplementedZKSnarkServer must be embedded to have forward compatible implementations.
type UnimplementedZKSnarkServer struct {
}

func (UnimplementedZKSnarkServer) Prove(context.Context, *ProveRequest) (*ProveResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}
func (UnimplementedZKSnarkServer) Verify(context.Context, *VerifyRequest) (*VerifyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedZKSnarkServer) CreateProveJob(context.Context, *CreateProveJobRequest) (*CreateProveJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProveJob not implemented")
}
func (UnimplementedZKSnarkServer) CancelProveJob(context.Context, *CancelProveJobRequest) (*CancelProveJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelProveJob not implemented")
}
func (UnimplementedZKSnarkServer) ListProveJob(context.Context, *ListProveJobRequest) (*ListProveJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProveJob not implemented")
}
func (UnimplementedZKSnarkServer) SubscribeToProveJob(*SubscribeToProveJobRequest, ZKSnark_SubscribeToProveJobServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToProveJob not implemented")
}
func (UnimplementedZKSnarkServer) mustEmbedUnimplementedZKSnarkServer() {}

// UnsafeZKSnarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZKSnarkServer will
// result in compilation errors.
type UnsafeZKSnarkServer interface {
	mustEmbedUnimplementedZKSnarkServer()
}

func RegisterZKSnarkServer(s grpc.ServiceRegistrar, srv ZKSnarkServer) {
	s.RegisterService(&ZKSnark_ServiceDesc, srv)
}

func _ZKSnark_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKSnarkServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnarkd.ZKSnark/Prove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKSnarkServer).Prove(ctx, req.(*ProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKSnark_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKSnarkServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnarkd.ZKSnark/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKSnarkServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKSnark_CreateProveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProveJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKSnarkServer).CreateProveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnarkd.ZKSnark/CreateProveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKSnarkServer).CreateProveJob(ctx, req.(*CreateProveJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKSnark_CancelProveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProveJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKSnarkServer).CancelProveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnarkd.ZKSnark/CancelProveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKSnarkServer).CancelProveJob(ctx, req.(*CancelProveJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKSnark_ListProveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProveJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKSnarkServer).ListProveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnarkd.ZKSnark/ListProveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKSnarkServer).ListProveJob(ctx, req.(*ListProveJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKSnark_SubscribeToProveJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToProveJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZKSnarkServer).SubscribeToProveJob(m, &zKSnarkSubscribeToProveJobServer{stream})
}

type ZKSnark_SubscribeToProveJobServer interface {
	Send(*ProveJobResult) error
	grpc.ServerStream
}

type zKSnarkSubscribeToProveJobServer struct {
	grpc.ServerStream
}

func (x *zKSnarkSubscribeToProveJobServer) Send(m *ProveJobResult) error {
	return x.ServerStream.SendMsg(m)
}

// ZKSnark_ServiceDesc is the grpc.ServiceDesc for ZKSnark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZKSnark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnarkd.ZKSnark",
	HandlerType: (*ZKSnarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prove",
			Handler:    _ZKSnark_Prove_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _ZKSnark_Verify_Handler,
		},
		{
			MethodName: "CreateProveJob",
			Handler:    _ZKSnark_CreateProveJob_Handler,
		},
		{
			MethodName: "CancelProveJob",
			Handler:    _ZKSnark_CancelProveJob_Handler,
		},
		{
			MethodName: "ListProveJob",
			Handler:    _ZKSnark_ListProveJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToProveJob",
			Handler:       _ZKSnark_SubscribeToProveJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/gnarkd.proto",
}
